import React from "react";
import { createContext, useState, useContext, useEffect } from "react";
import { useMainHttp } from "../hooks/useMainHttp";
import { UserProgressContext } from "./userProgressStore";

const MessageContext = createContext({
    receivableUsers: [],
    selectedUser: null,
    conversations: {},
    isLoading: false,
    fetchReceivableUsers: () => {},
    fetchMessages: () => {},
});

export function useMessageStore() {
    return useContext(MessageContext);
}

export default function MessageProvider({ children }) {
    const { request } = useMainHttp();
    const userProgressStore = useContext(UserProgressContext);

    const [receivableUsers, setReceivableUsers] = useState([]); // Î©îÏãúÏßÄÎ•º Î≥¥ÎÇº Ïàò ÏûàÎäî ÏÇ¨Îûå Î™©Î°ù
    const [selectedUser, setSelectedUser] = useState(null); // ÏÑ†ÌÉùÌïú ÎåÄÌôî ÏÉÅÎåÄ
    const [conversations, setConversations] = useState({}); // Ïú†Ï†ÄÎ≥Ñ ÎåÄÌôî Ï†ÄÏû•
    const [isLoading, setIsLoading] = useState(false);

    let loginUserId = userProgressStore.loginUserInfo.userInfo?.id || "";
    
    async function fetchReceivableUsers() {
        setIsLoading(true);

        try {
            const response = await request(`${userProgressStore.DEV_API_URL}/messages/receivable/${encodeURIComponent(loginUserId)}`);
            const resData = response.data;

            if (response.success) {
                setReceivableUsers(resData.result);
            } else {
                console.error("Ïú†Ï†Ä Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", response.error);
            }
        } catch (error) {
            console.error("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò:", error);
        } finally {
            setIsLoading(false);
        }
    }

    async function fetchMessages(loginUserId) {
        if (!loginUserId) {
            console.error("Ïú†Ï†Ä IDÍ∞Ä ÏóÜÏäµÎãàÎã§.")
            return;
        }
        
        setIsLoading(true);

        try {
            const startTime = "2020-01-01T00:00:00"; // ‚úÖ Î™®Îì† Î©îÏãúÏßÄÎ•º Í∞ÄÏ†∏Ïò§Í∏∞ ÏúÑÌï¥ Ïò§ÎûòÎêú ÎÇ†Ïßú ÏÑ§Ï†ï
            const endTime = new Date().toISOString();
            const response = await request(`${userProgressStore.DEV_API_URL}/messages/new?start=${startTime}&end=${endTime}&order=desc`)
            const resData = response.data;
            
            if (!response.success) {
                return;
            }
            
            if (!resData || resData.result === undefined) {
                return;
            }

            const selectedUserId = selectedUser.user_id;

            // ‚úÖ `from_id` ÎòêÎäî `to_id`Í∞Ä ÌòÑÏû¨ ÏÑ†ÌÉùÌïú Ïú†Ï†ÄÏôÄ ÏùºÏπòÌïòÎäî Î©îÏãúÏßÄÎßå Ï†ÄÏû•
            const filteredMessages = resData.result.filter(
                (msg) => 
                    (msg.from_id === loginUserId && msg.to_id === selectedUserId) || 
                    (msg.from_id === selectedUserId && msg.to_id === loginUserId)
            );

            console.log(`‚úÖ ${selectedUserId}ÏôÄ ÎÇò(${loginUserId})Ïùò ÎåÄÌôî Î©îÏãúÏßÄ`, filteredMessages);

            setConversations((prev) => ({
                ...prev,
                [selectedUserId]: filteredMessages.length > 0 ? filteredMessages : (prev[selectedUserId] || []),
            }));
        } catch (error) {
            console.error("‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: ", error);
        } finally {
            setIsLoading(false);
        }
    }

    // ÌäπÏ†ï Ïú†Ï†Ä ÏÑ†ÌÉù Ïãú Ìï¥Îãπ Ïú†Ï†ÄÏùò ÎåÄÌôî Î∂àÎü¨Ïò§Í∏∞
    function selectUser(user) {
        if (!user || !user.user_id) {
            return;
        }

        setSelectedUser(user);

        // ‚úÖ Ìï≠ÏÉÅ ÎåÄÌôî Î™©Î°ùÏùÑ ÏµúÏã† ÏÉÅÌÉúÎ°ú Î∂àÎü¨Ïò§Í∏∞
        fetchMessages(user.user_id);
    }

    // ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄ Ï∂îÍ∞Ä (Ï†ÑÏÜ°/ÏàòÏã†)
    function addMessage(selectedUserId, newMessage) {
        setConversations((prev) => ({
            ...prev,
            [selectedUserId]: [...(prev[selectedUserId] || []), newMessage],
        }));
    }

    useEffect(() => {
        if (!userProgressStore?.loginUserInfo?.userInfo?.id) {
            console.log("‚è≥ Waiting for login...");
            return;
        }
        
        console.log("üîÑ useEffect: fetchReceivableUsers Ïã§ÌñâÎê®");
        fetchReceivableUsers();
    }, [userProgressStore.loginUserInfo.userInfo?.id]);

    const ctxValue = {
        receivableUsers,
        selectedUser,
        conversations,
        isLoading,
        setReceivableUsers,
        selectUser,
        fetchReceivableUsers,
        fetchMessages,
        addMessage,
    }

    return (
        <MessageContext.Provider value={ctxValue}>
            {children}
        </MessageContext.Provider>
    );
}